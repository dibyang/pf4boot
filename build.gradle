import java.time.LocalDateTime

static def isPluginProject(Project project) {
    return project.hasProperty("plugin")
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
    //skip Test tasks
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'

File signing_cfg = new File("$project.rootDir/signing.properties")
if(signing_cfg.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signing_cfg))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }

    // 将构建的包签名
    signing {
        sign configurations.archives
    }
}


release {
    failOnUnversionedFiles = true
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUpdateNeeded = true
    revertOnFail = true
    tagTemplate = 'v${version}'
    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

}


subprojects {

    buildscript {
        repositories {
            mavenLocal()
            maven { url 'https://maven.aliyun.com/repository/public/' }
            mavenCentral()
        }
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    afterReleaseBuild.dependsOn uploadArchives

    configurations {
        inline
        compile.extendsFrom(inline)
        plugin
    }
    configurations.all {
        resolutionStrategy {
            // cache dynamic versions for 10 seconds
            cacheDynamicVersionsFor 10, 'seconds'
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    group 'net.xdob.pf4boot'
    version = project.rootProject.version


    sourceCompatibility = project.rootProject.jdkVersion
    targetCompatibility = project.rootProject.jdkVersion


    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}")
        //compile("org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}")
        //compile("org.springframework.boot:spring-boot-devtools:${spring_boot_version}")
        //compile("com.h2database:h2:1.4.196")
        compile("com.google.guava:guava:31.0-jre")
        compile("com.google.code.gson:gson:2.8.6")
        compile("org.apache.commons:commons-lang3:3.9")
        compile("org.slf4j:slf4j-api:${slf4j_version}")
        testCompile("junit:junit:4.12")
        annotationProcessor "org.pf4j:pf4j:${pf4j_version}"
        testAnnotationProcessor "org.pf4j:pf4j:${pf4j_version}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: findProperty("ossrhUsername")?:"", password: findProperty("ossrhPassword")?:"")
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: findProperty("ossrhUsername")?:"", password: findProperty("ossrhPassword")?:"")
                }

                pom.project {
                    name 'pf4boot'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description "基于pf4j 设计的Spring Boot插件框架"
                    url 'https://github.com/dibyang/pf4boot'

                    scm {
                        connection 'scm:git:https://github.com/dibyang/pf4boot.git'
                        developerConnection 'scm:git:https://github.com/dibyang/pf4boot.git'
                        url 'https://github.com/dibyang/pf4boot.git'
                    }

                    licenses {
                        license {
                            name 'GNU Lesser General Public License v3.0'
                            url 'https://www.gnu.org/licenses/lgpl.html'
                        }
                    }

                    developers {
                        developer {
                            id 'yangzj'
                            name 'Yang zhijian'
                            email '3227817@qq.com'
                        }
                    }
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        description = 'Build source jar'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
    }

    if (isPluginProject(project)) {

        Properties pluginProp = new Properties()
        pluginProp.load(file('plugin.properties').newDataInputStream())
        if(project.version != pluginProp.get("plugin.version")){
            pluginProp.setProperty("plugin.version",project.version)
            pluginProp.store(file('plugin.properties').newDataOutputStream(),null)
        }
        jar {

        }


        task copyInlineTolib(type: Copy) {
            group 'build'
            from configurations.inline
            into "$buildDir/inline"
        }
        build.dependsOn += copyInlineTolib
        jar.dependsOn += copyInlineTolib

        task buildJarPlugin(type: Jar) {
            group 'build'
            dependsOn build
            destinationDir file("$buildDir/libs/")
            entryCompression ZipEntryCompression.STORED
            into('lib') {
                from configurations.inline
            }
            manifest.attributes(
                "Build-Time": LocalDateTime.now(),
                "Plugin-Id": pluginProp.get("plugin.id"),
                "Plugin-Class": pluginProp.get("plugin.class"),
                "Plugin-Version": pluginProp.get("plugin.version"),
                "Plugin-Provider": pluginProp.get("plugin.provider"),
                "Plugin-Dependencies": pluginProp.get("plugin.dependencies"))
            with jar
            doLast {
                // Deploy built plugins...
            }
        }

        task addInlineToManifest() {
            String[] inline = new File("$buildDir/inline").list()
            if (inline!=null&&inline.length>0) {
                jar.manifest.attributes('Class-Path': inline.collect { "lib/$it" }.join(' '))
            }
        }
        buildJarPlugin.dependsOn += addInlineToManifest

        task buildZipPlugin(type: Zip) {
            group 'build'
            dependsOn jar
            destinationDir file("$buildDir/libs/")
            baseName project.name
            from 'plugin.properties'
            into('lib') {
                from "$buildDir/libs/$jar.archiveName"
                from configurations.inline
            }
            doLast {
                // Deploy built plugins...
            }
        }
        artifacts {
            archives buildZipPlugin
        }
    }



}
