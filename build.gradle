
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/public/' }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
        classpath "net.xdob.pf4boot:pf4boot-plugin:0.6.2"
    }
    //skip Test tasks
    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.contains("test")) {
                task.enabled = false
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'


/**
 * signing.properties 文件内容示例如下
 * signing.keyId=xx
 * signing.password=xxx
 * signing.secretKeyRingFile=C:/Users/admin/.gnupg/**_SECRET.gpg
 *
 * ossrhUsername=xx
 * ossrhPassword=xxx
 */
File signing_cfg = new File("$project.rootDir/signing.properties")
if(signing_cfg.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signing_cfg))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }

    // 将构建的包签名
    signing {
        sign configurations.archives
    }
}


release {
    failOnUnversionedFiles = true
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUpdateNeeded = true
    revertOnFail = true
    tagTemplate = 'v${version}'
    scmAdapters = [
        net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

}


subprojects {

    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url 'https://maven.aliyun.com/repository/public/' }
        }
        dependencies {
            classpath 'com.netflix.nebula:gradle-ospackage-plugin:11.0.0'
        }
    }

    apply plugin: 'java'
    apply plugin: "java-library"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'net.xdob.pf4boot-plugin'



    configurations.all {
        resolutionStrategy {
            // cache dynamic versions for 10 seconds
            cacheDynamicVersionsFor 10, 'seconds'
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    group 'net.xdob.pf4boot'
    version = project.rootProject.version


    sourceCompatibility = project.rootProject.jdkVersion
    targetCompatibility = project.rootProject.jdkVersion


    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        mavenCentral()
    }

    dependencies {
        //implementation("net.xdob.springframework.boot:spring-boot-starter-web:${spring_boot_version}")
        //implementation("net.xdob.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}")
        //implementation("net.xdob.springframework.boot:spring-boot-devtools:${spring_boot_version}")
        implementation("com.google.guava:guava:$guava_version")
        implementation("com.google.code.gson:gson:$gson_version")
        implementation("org.apache.commons:commons-lang3:3.9")
        compileOnly("org.slf4j:slf4j-api:${slf4j_version}")
        testImplementation("junit:junit:4.12")
        annotationProcessor "org.pf4j:pf4j:${pf4j_version}"
        testAnnotationProcessor "org.pf4j:pf4j:${pf4j_version}"
    }


    //对于典型的 Java 项目，您可以添加一个javadocJar以及一个 sourceJar任务
    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourceJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    // javadoc 配置，这里是自定义了 java doc 的一些配置
    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.version = true
        options.header = project.name
        options.addStringOption('Xdoclint:none', '-quiet')

        // suppress warnings due to cross-module @see and @link references;
        // note that global 'api' task does display all warnings.
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
        options.encoding = "UTF-8"  //编码一定要配置否则直接出错
        options.charSet = 'UTF-8'
    }

    // 并将它们与项目 jar 本身一起连接到 artifacts 集合中：
    artifacts {
        archives javadocJar, sourceJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version
                //如果不定义，则会按照以上默认值执行
                // 添加源码jar
                artifact sourceJar
                // 添加javadocjar
                artifact javadocJar
                // 指定要发布的模块
                from components.java


                pom {
                    name = 'pf4boot'
                    description = "基于pf4j 设计的Spring Boot插件框架"
                    url = 'https://github.com/dibyang/pf4boot'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'yangzj'
                            name = 'Yang zhijian'
                            email = '3227817@qq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/dibyang/pf4boot.git'
                        developerConnection = 'scm:git:https://github.com/dibyang/pf4boot.git'
                        url = 'https://github.com/dibyang/pf4boot.git'
                    }
                }

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
        repositories {
            maven {
                // 发布仓库配置，这里基于version后缀是否为SNAPSHOT来区分发布到release库还是snapshots库
                if(version.endsWith('SNAPSHOT')){
                    it.url = project.property("snapshotsRepository")
                }else{
                    it.url = project.property("releasesRepository")
                }
                it.name = "deployment"
                it.credentials {
                    it.username = project.property("ossrhUsername")
                    it.password = project.property("ossrhPassword")
                }
            }
        }
    }

    // 将构建的包签名
    signing {
        sign publishing.publications.maven
    }



}
